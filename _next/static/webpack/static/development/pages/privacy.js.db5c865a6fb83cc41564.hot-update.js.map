{"version":3,"file":"static/webpack/static/development/pages/privacy.js.db5c865a6fb83cc41564.hot-update.js","sources":["webpack:///./components/NavBar.jsx"],"sourcesContent":["import \"./NavBar.module.scss\";\nimport Link from \"next/link\";\nimport ScrollLink from \"./ScrollLink\";\nimport { GitHub } from \"react-feather\";\nimport getScrollTop from \"./lib/get-scroll-top\";\nimport { AUTO_SCROLL_START, AUTO_SCROLL_END } from \"./lib/events\";\n\nclass NavBar extends React.Component {\n  currentScrollTop = -1;\n  ref = React.createRef();\n\n  state = {\n    top: undefined,\n    leaving: false,\n    pinned: false,\n    collapse: false\n  };\n\n  autoScrolling = false;\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.onScroll);\n    window.addEventListener(AUTO_SCROLL_START, this.onAutoScrollStart);\n    window.addEventListener(AUTO_SCROLL_END, this.onAutoScrollEnd);\n\n    // enable component after 100ms to give browser some time to scroll\n    // to the right place\n    setTimeout(() => {\n      let newScrollTop = getScrollTop();\n      this.currentScrollTop = newScrollTop;\n      let height = this.ref.current.clientHeight;\n      let isTop = newScrollTop <= height;\n      if (!isTop) {\n        this.setState({\n          top: false,\n          pinned: true\n        });\n      }\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.onScroll);\n    window.removeEventListener(AUTO_SCROLL_START, this.onAutoScrollStart);\n    window.removeEventListener(AUTO_SCROLL_END, this.onAutoScrollEnd);\n  }\n\n  onAutoScrollStart = () => {\n    this.autoScrolling = true;\n    this.setState(state => ({\n      top: false,\n      pinned: true,\n      collapse: false\n    }));\n  }\n\n  onAutoScrollEnd = () => {\n    this.autoScrolling = false;\n    this.setState(state => ({\n      top: false,\n      pinned: true,\n      collapse: false\n    }));\n  }\n\n  onToggle = () => {\n    this.setState(state => ({\n      collapse: !state.collapse\n    }));\n  }\n\n  onScroll = (e) => {\n    let newScrollTop = getScrollTop();\n\n    if (this.currentScrollTop < 0) {\n      // not enabled yet\n      return;\n    }\n\n    if (this.autoScrolling) {\n      // do not change state of navbar while we are auto-scrolling\n      this.currentScrollTop = newScrollTop;\n      return;\n    }\n\n    let height = this.ref.current.clientHeight;\n    let py = -this.ref.current.offsetTop;\n\n    // If we are 'pinned' and scroll up until we reach the initial position\n    // of the navbar, switch from 'pinned' to 'top'. Otherwise, switch from\n    // 'top' to 'not-top' when the navbar leaves the screen.\n    let isTop = this.state.pinned ? newScrollTop <= py : newScrollTop <= height;\n\n    if (this.state.pinned && isTop) {\n      this.setState({\n        pinned: false\n      });\n    }\n\n    if (!isTop && this.state.top && !this.state.leaving) {\n      // add .leaving class so there won't be a transition to translateY(-100%)\n      this.setState({\n        leaving: true,\n        collapse: false\n      });\n    } else {\n      this.setState({\n        top: isTop,\n        leaving: false\n      });\n    }\n\n    if (!isTop) {\n      // switch between 'pinned' states only if we're not 'top'\n      let diff = newScrollTop - this.currentScrollTop;\n      if (this.state.pinned && diff > 2) {\n        this.setState({\n          pinned: false,\n          collapse: false\n        });\n      } else if (!this.state.pinned && diff < -2) {\n        this.setState({\n          pinned: true\n        });\n      }\n    }\n\n    this.currentScrollTop = newScrollTop;\n  }\n\n  render() {\n    let top;\n    if (this.state.top === undefined) {\n      top = \"\";\n    } else {\n      top = this.state.top ? \"top\" : \"not-top\";\n    }\n    let leaving = this.state.leaving ? \"leaving\" : \"\";\n    let pinned = this.state.pinned ? \"pinned\" : \"not-pinned\";\n    let collapse = this.state.collapse ? \"collapse\" : \"\";\n    return (\n      <nav className={`navbar ${top} ${leaving} ${pinned} ${collapse}`}\n          id=\"main-navbar\" ref={this.ref}>\n        <div className=\"container\">\n          <div className=\"head\">\n            <Link href=\"/\">\n              <a className=\"navbar-brand\">\n                <img src=\"/images/steep-logo.svg\" width=\"200\" />\n              </a>\n            </Link>\n            <div className=\"button\" onClick={this.onToggle}>\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n          <ScrollLink className=\"nav-item\" href=\"/#features\">Features</ScrollLink>\n          <ScrollLink className=\"nav-item\" href=\"/#download-and-get-started\">Download</ScrollLink>\n          <ScrollLink className=\"nav-item\" href=\"/#documentation\">Docs</ScrollLink>\n          <ScrollLink className=\"nav-item\" href=\"/#about\">About</ScrollLink>\n          <ScrollLink className=\"nav-item\" href=\"https://github.com/steep-wms/steep\">\n            <GitHub className=\"feather\" />\n          </ScrollLink>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AA4BA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;AA7GA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAqiKA;;;;A","sourceRoot":""}